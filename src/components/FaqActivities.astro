---
interface FaqItem {
  question: string;
  answer: string[] | string;
}

interface Props {
  faqs: FaqItem[];
}

const { faqs } = Astro.props;
---

<div>
  <div class="accordion">
    {faqs.map((faq, index) => (
      <div class="accordion-item">
        <button
          id={`accordion-button-${index}`}
          aria-expanded="false"
          class="w-full cursor-pointer text-start font-inter text-lg font-semibold"
        >
          <span class="accordion-title">{faq.question}</span>
          <span class="icon" aria-hidden="true"></span>
        </button>
        <div class="accordion-content">
          {Array.isArray(faq.answer) ? (
            <ul class="list-inside list-disc text-start text-lg font-semibold opacity-70">
              {faq.answer.map((point) => (
                <li>{point}</li>
              ))}
            </ul>
          ) : (
            <p class="text-start text-lg font-semibold opacity-70" set:html={faq.answer} />
          )}
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  .accordion {
    margin-top: 1rem;
  }

  .accordion-item {
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .accordion button {
    position: relative;
    display: block;
    text-align: left;
    width: 100%;
    padding: 1em 0;
    border: none;
    background: none;
    outline: none;
  }

  .accordion button:hover,
  .accordion button:focus {
    cursor: pointer;
  }

  .accordion button .icon {
    display: inline-block;
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 22px;
    height: 22px;
  }

  .accordion button .icon::before {
    display: block;
    position: absolute;
    content: '';
    top: 9px;
    left: 5px;
    width: 10px;
    height: 2px;
    background: currentColor;
  }

  .accordion button .icon::after {
    display: block;
    position: absolute;
    content: '';
    top: 5px;
    left: 9px;
    width: 2px;
    height: 10px;
    background: currentColor;
  }

  .accordion button[aria-expanded='true'] .icon::after {
    width: 0;
  }

  .accordion .accordion-content {
    opacity: 0;
    max-height: 0;
    overflow: hidden;
    transition: opacity 200ms linear, max-height 200ms linear;
    will-change: opacity, max-height;
  }

  .accordion .accordion-content p {
    margin: 1em 0;
  }

  .accordion button[aria-expanded='true'] + .accordion-content {
    opacity: 1;
    max-height: 500px;
    padding-bottom: 1rem;
  }
</style>

<script>
  const accordionButtons = document.querySelectorAll('.accordion button');

  accordionButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const isExpanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', isExpanded ? 'false' : 'true');
    });
  });
</script>